# Container Manager Architecture Flow

```mermaid
flowchart TD
    %% Frontend Components
    UI[Next.js Frontend App]
    CM[ContainerManager Component]
    FE[FileExplorer Component]
    TM[Terminal Component]
    FU[FileUploadPanel Component]

    %% API Clients
    CAPI[containerAPI Client]
    WAPI[webContainerAPI Client]
    WS[ContainerWebSocket Client]

    %% Backend Services
    CMC[ContainerManagerController]
    WCC[WebContainerController]
    CMS[ContainerManagerService]
    CG[ContainerGateway]

    %% External Systems
    DOCKER[Docker Engine]
    CONT[Docker Containers]

    %% State Storage
    MAPS[In-Memory Maps<br/>- containers<br/>- dockerContainers<br/>- containerWorkingDirs]

    %% User Interactions
    USER[User]

    %% User to Frontend Components
    USER --> UI
    UI --> CM
    UI --> FE
    UI --> TM
    UI --> FU

    %% Frontend Components to API Clients
    CM --> CAPI
    CM --> WAPI
    FE --> WS
    TM --> WS
    FU --> WS

    %% API Clients to Backend
    CAPI -->|REST API| CMC
    WAPI -->|REST API| WCC
    WS -->|WebSocket /container| CG

    %% Backend Controllers to Service
    CMC --> CMS
    WCC --> CMS
    CG --> CMS

    %% Service to External Systems
    CMS -->|Docker API| DOCKER
    DOCKER --> CONT

    %% Service to State
    CMS --> MAPS
    CG --> MAPS

    %% Container Creation Flow
    subgraph "Container Creation Flow"
        C1[POST /containers or /webcontainer/boot]
        C2[ContainerManagerService.createContainer]
        C3[Docker.createContainer with node:alpine]
        C4[Store container in Maps]
        C5[Return container info with port]

        C1 --> C2 --> C3 --> C4 --> C5
    end

    %% WebSocket Interaction Flow
    subgraph "WebSocket Flow"
        W1[Client connects to /container namespace]
        W2[join-container event]
        W3[Store connection in containerConnections]
        W4[Initialize working directory]
        W5[Handle fs-operation, process-operation, terminal-input]
        W6[Execute Docker commands]
        W7[Return results via WebSocket]

        W1 --> W2 --> W3 --> W4 --> W5 --> W6 --> W7
    end

    %% File System Operations
    subgraph "File System Operations"
        F1[fs-operation WebSocket event]
        F2[executeFileSystemOperation]
        F3[Real Docker exec commands]
        F4[ls -la, cat, echo, mkdir, rm]

        F1 --> F2 --> F3 --> F4
    end

    %% Terminal Session Management
    subgraph "Terminal Session"
        T1[terminal-input event]
        T2[Check if cd command]
        T3[handleCdCommand or normal execution]
        T4[Update containerWorkingDirs]
        T5[Execute: cd currentDir && command]

        T1 --> T2 --> T3 --> T4 --> T5
    end

    %% Styling
    classDef frontend fill:#e1f5fe
    classDef backend fill:#f3e5f5
    classDef external fill:#fff3e0
    classDef state fill:#e8f5e8

    class UI,CM,FE,TM,FU,CAPI,WAPI,WS frontend
    class CMC,WCC,CMS,CG backend
    class DOCKER,CONT external
    class MAPS state
```

## Key Interaction Patterns

### 1. Container Lifecycle
- **Creation**: Frontend → REST API → ContainerManagerService → Docker Engine
- **Management**: State stored in three Maps (containers, dockerContainers, containerWorkingDirs)
- **Cleanup**: DELETE endpoint removes container and cleans all state

### 2. Real-time Operations
- **WebSocket Connection**: Client connects to `/container` namespace
- **Command Execution**: All file ops, process spawning, and terminal commands via WebSocket
- **Working Directory**: Persistent state maintained in `containerWorkingDirs` Map

### 3. File System Integration
- **Real Docker Commands**: All operations execute actual Docker exec commands
- **Stream Parsing**: 8-byte header parsing for stdout/stderr multiplexing
- **Shell Escaping**: Proper escaping for file contents in shell commands

### 4. Dual API Approach
- **Direct Container API**: Full container management via ContainerManagerController
- **WebContainer Compatible**: Migration-friendly API via WebContainerController
- **Unified Backend**: Both APIs use the same ContainerManagerService