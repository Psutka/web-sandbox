openapi: 3.0.3
info:
  title: Container Gateway WebSocket API
  description: |
    WebSocket API for real-time container interactions in the Container Manager system.
    This API provides WebSocket-based operations for file system management, process execution,
    and terminal interactions within Docker containers.

    ## Connection
    Connect to WebSocket namespace: `/container`

    ## Authentication Flow
    1. Connect to WebSocket endpoint
    2. Send `join-container` event to authenticate and join container session
    3. All subsequent operations require active container session

    ## Event Flow
    - Client emits events to server (e.g., `fs-operation`, `terminal-input`)
    - Server responds with corresponding result events (e.g., `fs-result`, `terminal-output`)
    - Server may emit `error` events for failed operations
  version: 1.0.0
  contact:
    name: Container Manager API
  license:
    name: MIT

servers:
  - url: ws://localhost:3001/container
    description: Local development WebSocket server

# WebSocket events are documented using custom extensions
x-websocket-events:
  # Client to Server Events
  client-to-server:
    join-container:
      summary: Join a container session
      description: |
        Authenticate and establish connection to a specific container.
        Must be called before any other operations.
      payload:
        $ref: '#/components/schemas/JoinContainerRequest'
      responses:
        - event: joined-container
          schema:
            $ref: '#/components/schemas/JoinContainerResponse'
        - event: error
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    fs-operation:
      summary: Execute file system operation
      description: |
        Perform file system operations within the container.
        Requires active container session via `join-container`.
      payload:
        $ref: '#/components/schemas/FileSystemOperation'
      responses:
        - event: fs-result
          schema:
            $ref: '#/components/schemas/FileSystemResult'
        - event: error
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    process-operation:
      summary: Execute process operation
      description: |
        Spawn processes within the container.
        Requires active container session via `join-container`.
      payload:
        $ref: '#/components/schemas/ProcessOperation'
      responses:
        - event: process-result
          schema:
            $ref: '#/components/schemas/ProcessResult'
        - event: error
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    terminal-input:
      summary: Send terminal input
      description: |
        Execute terminal commands in the container and receive output.
        Requires active container session via `join-container`.
      payload:
        $ref: '#/components/schemas/TerminalInput'
      responses:
        - event: terminal-output
          schema:
            $ref: '#/components/schemas/TerminalOutput'

  # Server to Client Events
  server-to-client:
    joined-container:
      summary: Container session established
      description: Confirms successful connection to container
      payload:
        $ref: '#/components/schemas/JoinContainerResponse'

    fs-result:
      summary: File system operation result
      description: Result of file system operation
      payload:
        $ref: '#/components/schemas/FileSystemResult'

    process-result:
      summary: Process operation result
      description: Result of process spawn operation
      payload:
        $ref: '#/components/schemas/ProcessResult'

    terminal-output:
      summary: Terminal command output
      description: Output from executed terminal command
      payload:
        $ref: '#/components/schemas/TerminalOutput'

    error:
      summary: Operation error
      description: Error response for failed operations
      payload:
        $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    JoinContainerRequest:
      type: object
      required:
        - containerId
      properties:
        containerId:
          type: string
          format: uuid
          description: UUID of the container to join
          example: "550e8400-e29b-41d4-a716-446655440000"

    JoinContainerResponse:
      type: object
      properties:
        containerId:
          type: string
          format: uuid
          description: UUID of the joined container
          example: "550e8400-e29b-41d4-a716-446655440000"
        status:
          type: string
          enum: [creating, running, stopped, error]
          description: Current status of the container
          example: "running"

    FileSystemOperation:
      type: object
      required:
        - type
        - path
      properties:
        type:
          type: string
          enum: [writeFile, readFile, readdir, mkdir, rm]
          description: Type of file system operation
          example: "writeFile"
        path:
          type: string
          description: File or directory path within container
          example: "/workspace/src/index.js"
        contents:
          type: string
          description: File contents (required for writeFile operations)
          example: "console.log('Hello World');"
        options:
          type: object
          description: Additional options for the operation
          additionalProperties: true

    FileSystemResult:
      type: object
      properties:
        operation:
          type: string
          enum: [writeFile, readFile, readdir, mkdir, rm]
          description: The operation that was performed
          example: "writeFile"
        result:
          oneOf:
            - $ref: '#/components/schemas/WriteFileResult'
            - $ref: '#/components/schemas/ReadFileResult'
            - $ref: '#/components/schemas/ReadDirResult'
            - $ref: '#/components/schemas/MkdirResult'
            - $ref: '#/components/schemas/RemoveResult'

    WriteFileResult:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "File /workspace/src/index.js written"

    ReadFileResult:
      type: object
      properties:
        contents:
          type: string
          example: "console.log('Hello World');"

    ReadDirResult:
      type: object
      properties:
        files:
          type: array
          items:
            type: string
          example: ["file1.js", "file2.ts", "package.json"]

    MkdirResult:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Directory /workspace/src created"

    RemoveResult:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "/workspace/old-file.js removed"

    ProcessOperation:
      type: object
      required:
        - type
        - command
      properties:
        type:
          type: string
          enum: [spawn]
          description: Type of process operation (currently only spawn is supported)
          example: "spawn"
        command:
          type: string
          description: Command to execute
          example: "npm"
        args:
          type: array
          items:
            type: string
          description: Command arguments
          example: ["run", "dev"]
        options:
          $ref: '#/components/schemas/SpawnOptions'

    SpawnOptions:
      type: object
      properties:
        cwd:
          type: string
          description: Working directory for the command
          example: "/workspace"
        env:
          type: object
          additionalProperties:
            type: string
          description: Environment variables
          example:
            NODE_ENV: "development"
            PORT: "3000"

    ProcessResult:
      type: object
      properties:
        operation:
          type: string
          enum: [spawn]
          description: The operation that was performed
          example: "spawn"
        result:
          $ref: '#/components/schemas/SpawnResult'

    SpawnResult:
      type: object
      properties:
        pid:
          type: integer
          description: Process ID (randomly generated for demo)
          example: 1234
        output:
          type: string
          description: Command output or error message
          example: "> my-app@1.0.0 dev\n> next dev\n\nready - started server on http://localhost:3000"
        exitCode:
          type: integer
          description: Process exit code
          example: 0

    TerminalInput:
      type: object
      required:
        - input
      properties:
        input:
          type: string
          description: Terminal command to execute
          example: "ls -la"

    TerminalOutput:
      type: object
      properties:
        output:
          type: string
          description: Terminal command output
          example: "total 8\ndrwxr-xr-x 1 root root  4096 Jan 1 12:00 .\ndrwxr-xr-x 1 root root  4096 Jan 1 12:00 ..\n-rw-r--r-- 1 root root   123 Jan 1 12:00 package.json"

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Error message
          example: "Container not found"
        operation:
          type: string
          description: Operation that failed (if applicable)
          example: "writeFile"

# Additional documentation for WebSocket usage
x-websocket-examples:
  join-container:
    description: "Example: Joining a container session"
    client-emit:
      event: "join-container"
      data:
        containerId: "550e8400-e29b-41d4-a716-446655440000"
    server-response:
      event: "joined-container"
      data:
        containerId: "550e8400-e29b-41d4-a716-446655440000"
        status: "running"

  write-file:
    description: "Example: Writing a file to the container"
    client-emit:
      event: "fs-operation"
      data:
        type: "writeFile"
        path: "/workspace/index.js"
        contents: "console.log('Hello from container!');"
    server-response:
      event: "fs-result"
      data:
        operation: "writeFile"
        result:
          success: true
          message: "File /workspace/index.js written"

  terminal-command:
    description: "Example: Executing a terminal command"
    client-emit:
      event: "terminal-input"
      data:
        input: "node index.js"
    server-response:
      event: "terminal-output"
      data:
        output: "Hello from container!"

x-connection-lifecycle:
  steps:
    - step: 1
      description: "Connect to WebSocket"
      action: "Client establishes WebSocket connection to /container namespace"
    - step: 2
      description: "Join container"
      action: "Client emits 'join-container' event with containerId"
    - step: 3
      description: "Receive confirmation"
      action: "Server responds with 'joined-container' event"
    - step: 4
      description: "Perform operations"
      action: "Client can now emit fs-operation, process-operation, or terminal-input events"
    - step: 5
      description: "Receive responses"
      action: "Server responds with appropriate result events or error events"
    - step: 6
      description: "Disconnect"
      action: "Client disconnects, server cleans up container association"

x-error-handling:
  common-errors:
    - error: "Container not found"
      cause: "Invalid containerId provided to join-container"
      resolution: "Verify container exists and is running"
    - error: "Not connected to a container"
      cause: "Client attempted operation without joining container first"
      resolution: "Send join-container event before other operations"
    - error: "Unknown file system operation"
      cause: "Invalid operation type in fs-operation event"
      resolution: "Use valid operation types: writeFile, readFile, readdir, mkdir, rm"
    - error: "Unknown process operation"
      cause: "Invalid operation type in process-operation event"
      resolution: "Use valid operation type: spawn"